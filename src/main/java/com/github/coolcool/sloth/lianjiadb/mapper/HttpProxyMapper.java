package com.github.coolcool.sloth.lianjiadb.mapper;

import com.github.coolcool.sloth.lianjiadb.model.HttpProxy;
import org.apache.ibatis.annotations.*;

import javax.annotation.Generated;
import java.util.List;

@Generated(
	value = {
		"https://github.com/coolcooldee/sloth",
		"Sloth version:1.0"
	},
	comments = "This class is generated by Sloth"
)
public interface HttpProxyMapper {

	@Select("SELECT COUNT(*) FROM http_proxy ")
	Integer count();

	@Select("SELECT COUNT(*) FROM http_proxy where host=#{host}")
	Integer countByHost(@Param("host") String host);


	@Select("SELECT * FROM http_proxy WHERE id = #{id} LIMIT 1 ")
	HttpProxy getById(@Param("id") Object id);


	@Delete("DELETE FROM http_proxy WHERE id = #{id} ")
	Integer deleteById(@Param("id") Object id);

	@Update({
		"UPDATE http_proxy SET host=#{host}, port=#{port}, location=#{location}, status=#{status}, createtime=#{createtime} where id = #{id}"
	})
	Integer update(HttpProxy httpProxy);

	@Update({
			"UPDATE http_proxy SET status=#{status} where host = #{host}"
	})
	Integer updateByHostAndStatus(@Param("host") String host, @Param("status") int status);

	@Insert({
		"INSERT IGNORE INTO http_proxy (host, port, location, status, createtime)",
		"VALUE (#{host}, #{port}, #{location}, #{status}, now())"
	})
	Integer save(HttpProxy httpProxy);


	@Select("SELECT * FROM http_proxy")
	List<HttpProxy> listAll();

	@Select("SELECT * FROM http_proxy where (status = 0 or status is null) order by id desc limit #{count}")
	List<HttpProxy> listAvailable(@Param("count") int count);


	@Select("SELECT * FROM http_proxy LIMIT #{start}, #{step}")
	List<HttpProxy> page(@Param("start") int start, @Param("step") int step);
	
}